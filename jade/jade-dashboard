#!/usr/bin/python3
# coding: utf-8
"""

 Jade   - Just Another Desktop Environment
 Author - Copyright (c) 2017 Vitor Lopes
 url    - https://github.com/codesardine/Jadesktop

"""
import os
import pwd
import subprocess
import gi
import webbrowser
from lib import menu
from lib import icons
from j.AK import Api, AppWindow, settings
from gi.repository import Gtk, WebKit2, Gio
from functools import lru_cache as cache

def get_desktop_env():
    return os.environ.get('DESKTOP_SESSION')

def get_user_name():
    user_name = pwd.getpwuid(os.getuid())[4].replace(",", " ")
    if user_name == "" and os.path.exists("/usr/bin/calamares"):
        user_name = "Manjaro WebDad"

    return user_name


@cache(maxsize=None)
def get_disk_usage():
    """
    :return: total disk usage in percentage
    """
    contents = []
    disk_usage = os.popen('df --total')  # TODO this works but needs a fix i don't like having to use a list.
    for entry in disk_usage:
        if entry.startswith("total"):
            contents.append(entry)
            percentage = contents[0].split("%")[0].strip().split(" ")[-1].strip() + "%"
            return percentage


Api.html = Api.Fs.open_file(
    os.path.dirname(os.path.realpath(__file__)) + '/theme/jade.html'
).format(
terminal_icon           = icons.get("terminal"),
file_manager_icon       = icons.get("folder"),
browser_icon            = icons.get("browser"),
software_installer_icon = icons.get("system-software-install"),
settings_icon           = icons.get("preferences-desktop"),
user_icon               = icons.get("system-users"),
logout_icon             = icons.get("system-log-out"),
shutdown_icon           = icons.get("system-shutdown"),
reboot_icon             = icons.get("system-reboot"),
hibernate_icon          = icons.get("system-hibernate"),
suspend_icon            = icons.get("system-suspend"),
sleep_icon              = icons.get("system-hibernate"),
search_icon             = icons.get("search"),
about_jade_icon         = icons.get("dialog-information"),
distro_logo             = icons.get(settings("app", "distribution_logo")),
user_name               = get_user_name()
)


def get_user_style():
    user_folder = os.path.expanduser("~")
    path = user_folder + "/.config/jade/theme/style.css"
    if os.path.exists(path):
        Api.html += "<script>themeOverride('%s');</script></body></html>" % path
        print('User style.css found')

    else:
        Api.html += "</body></html>"


class JadeWindow(AppWindow):
    """
    extends AK.AppWindow functionality
    """

    def __init__(self):

        super(JadeWindow, self).__init__()

        @cache(maxsize=None)
        def on_decide_policy(webview, decision, decision_type):

            """

            :param webview:
            :param decision:
            :param decision_type:
            :return: if is not a predicted action do nothing.
            """            
            def execute(command):

                """

                :param command: shell command to execute.
                :return: we are not loading a url don't follow link or we get a blank page.
                """
                subprocess.Popen(command, shell=True)
                decision.ignore()
                return True

            if decision_type == WebKit2.PolicyDecisionType.NAVIGATION_ACTION:

                navigation_action = decision.get_navigation_action()
                navigation_request = navigation_action.get_request()
                navigation_type = navigation_action.get_navigation_type()
                url = navigation_request.get_uri()

                if url.startswith("file://") and url.endswith("/jade/"):
                    pass

                elif url.startswith("xdg-open:"):
                    command = url.replace('xdg-open:', 'xdg-open ')
                    execute(command)
                
                elif url.startswith("shell:"):
                    command = url.replace('shell:', '')
                    execute(command)

                elif url.startswith("desktop:"):
                    url = url.replace('desktop:', '')
                    get_desktop_file = Gio.DesktopAppInfo.new_from_filename(url)
                    command          = get_desktop_file.get_executable()
                    name             = get_desktop_file.get_display_name()
                    print("Launching - " + name)
                    print(" Command - " + command)
                    execute(command)

                elif navigation_type == WebKit2.NavigationType.LINK_CLICKED:
                    print("Link Clicked")
                    print(url + " <- Action Denied Repeated URL")
                    decision.ignore()
                    return True

                elif navigation_type == WebKit2.NavigationType.OTHER:
                    print("Unknown Navigation Request " + url)
                    
                else:
                    print(url + " <- Action Denied")
                    decision.ignore()
                    return True

            return False

        def on_title_changed(webview, title):

            """

            :param webview:
            :param title:
            """
            title_name = webview.get_title()

            if title_name.startswith("disk-usage"):
                percentage = get_disk_usage()
                self.webview.run_javascript('$(".disk-percentage").text("' + percentage + '");getDiskColors();')

        def on_load_changed(webview, event):
            if event == WebKit2.LoadEvent.STARTED:
                print("redirect")

        
        self.webview.connect("notify::title", on_title_changed)
        self.webview.connect("decide-policy", on_decide_policy)
        self.webview.connect("load-changed", on_load_changed)


get_user_style()
menu.Menu()
JadeWindow()
Gtk.main()
